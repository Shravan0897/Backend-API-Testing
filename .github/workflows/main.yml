name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20, 22]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect package manager by lockfile (supports nested workspaces/monorepos)
      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          if git ls-files -- **/pnpm-lock.yaml | grep -q .; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
          elif git ls-files -- **/yarn.lock | grep -q .; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
          elif git ls-files -- **/package-lock.json | grep -q .; then
            echo "manager=npm" >> $GITHUB_OUTPUT
          else
            echo "No lockfile detected; defaulting to npm"
            echo "manager=npm" >> $GITHUB_OUTPUT
          fi

      # Setup Node + cache for the detected manager
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ steps.pm.outputs.manager }}
          # Support monorepos by checking all possible lockfile locations
          cache-dependency-path: |
            **/pnpm-lock.yaml
            **/yarn.lock
            **/package-lock.json

      # Install the package manager if needed
      - name: Set up pnpm
        if: ${{ steps.pm.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Install deps using the detected manager (repo root)
      # If your actual project lives in a subfolder, add "working-directory:"
      - name: Install dependencies
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      # Optional type-check, only if tsconfig.json exists
      - name: Type check
        run: |
          if [ -f tsconfig.json ]; then
            npx tsc -p . --noEmit
          else
            echo "No tsconfig.json; skipping."
          fi

      # Run tests (expects a "test" script in package.json)
      - name: Test
        env:
          BASE_URL: ${{ secrets.BASE_URL }} # optional override
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then
            pnpm test
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then
            yarn test
          else
            npm test --if-present
          fi
